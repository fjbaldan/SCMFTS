library(cmftsv2)
as.data.frame(cmftsv2(list(ts(base::sample(100,100),frequency=10))))
library(cmftsv2)
as.data.frame(cmftsv2(list(ts(base::sample(100,100),frequency=10))))
6*60*60
as.data.frame(cmftsv2(list(ts(base::sample(100,100),frequency=10))))
detach(combinat)
library(cmftsv2)
as.data.frame(cmftsv2(list(ts(base::sample(100,100),frequency=10))))
library(cmftsv2)
as.data.frame(cmftsv2(list(ts(base::sample(100,100),frequency=10))))
ls()
library(cmftsv2)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 10),scale=F, features="hw_parameters", parallel = FALSE)
library(tsfeatures)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 10),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 100),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 50),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 20),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 25),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 24),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(100,100),frequency = 25),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 25),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 250),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 10),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 15),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 20),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 25),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 24),scale=F, features="hw_parameters", parallel = FALSE)
tsfeatures(tslist=ts(base::sample(1000,1000),frequency = 24),scale=F, features="hw_parameters", parallel = FALSE)
measure.shannonEntropy <- function(time_serie, method) {
result = tryCatch({
if(method %in% c("Jeffreys", "Laplace", "SG", "minimax","MM","shrink","CS","ML")){
counts=discretize( time_serie, numBins=10)
out=entropy::entropy(counts, method=method,verbose=F)
out
}else{
warning ("Incorrect Method.")
out=NA
}
out
}, error = function(e) {
out=NA
out
})
names(result)=paste0("shannon_entropy_",method)
return (result)
}
time_serie=1:100
measure.shannonEntropy(time_serie,"SG")
library(entropy)
measure.shannonEntropy(time_serie,"SG")
time_serie=ts(1:100,frequency = 10)
measure.shannonEntropy(time_serie,"SG")
count=1:100
out=entropy::entropy(counts, method=method,verbose=F)
measure.shannonEntropy(counts,"SG")
counts
entropy::entropy(counts, method="SG",verbose=F)
counts
counts=time_serie
counts
entropy::entropy(counts, method="SG",verbose=F)
counts=discretize(time_serie, numBins=10)
counts
library(cmftsv2)
library(cmftsv2)
library(cmftsv2)
measure.permutation_entropy <- function(time_serie, order=4) {
result = tryCatch({
out=tsExpKit::permutationEntropy(time_serie, order) #Need combinat
out
}, error = function(e) {
out=NA
out
})
names(result)="permutation_entropy"
return(result)
}
measure.permutation_entropy(1:100)
tsExpKit::permutationEntropy(1:100, 4)
library(cmftsv2)
measure.permutation_entropy <- function(time_serie, order=4) {
result = tryCatch({
out=tsExpKit::permutationEntropy(time_serie, order) #Need combinat
out
}, error = function(e) {
out=NA
out
})
names(result)="permutation_entropy"
return(result)
}
tsExpKit::permutationEntropy(1:100, 4)
library(cmftsv2)
measure.permutation_entropy <- function(time_serie, order=4) {
result = tryCatch({
out=tsExpKit::permutationEntropy(time_serie, order) #Need combinat
out
}, error = function(e) {
out=NA
out
})
names(result)="permutation_entropy"
return(result)
}
tsExpKit::permutationEntropy(1:100, 4)
library(combinat)
tsExpKit::permutationEntropy(1:100, 4)
library(cmftsv2)
measure.permutation_entropy <- function(time_serie, order=4) {
result = tryCatch({
out=tsExpKit::permutationEntropy(time_serie, order) #Need combinat
out
}, error = function(e) {
out=NA
out
})
names(result)="permutation_entropy"
return(result)
}
measure.permutation_entropy(1:100,4)
library(cmftsv2)
getwd()
measure.permutation_entropy <- function(time_serie, order=4) {
result = tryCatch({
out=tsExpKit::permutationEntropy(time_serie, order) #Need combinat
out
}, error = function(e) {
out=NA
out
})
names(result)="permutation_entropy"
return(result)
}
tsExpKit::permutationEntropy(1:100, order)
tsExpKit::permutationEntropy(1:100, 4)
library(cmftsv2)
permn()
library(cmftsv2)
library(cmftsv2)
library(cmftsv2)
library(cmftsv2)
measure.spectral_entropy_old <- function(y) {
result = tryCatch({
sumyf=0.0
n=length(y)
yf=fft(y)
sumyf=sum(sapply(yf,function(x){
abs(x)
}))
yf=yf/sumyf
entropy=sum(sapply(yf,function(x){
abs(x)*log(1/abs(x))
}))
entropy
}, error = function(e) {
out=NA
out
})
names(result)="spectral_entropy"
return(result)
}
measure.spectral_entropy <- function(y) {
result = tryCatch({
entropy=ForeCA::spectral_entropy(y)
}, error = function(e) {
out=NA
out
})
names(result)="spectral_entropy"
return(result)
}
spectral_entropy(1:100)
measure.spectral_entropy(1:100)
measure.spectral_entropy_old(1:100)
measure.spectral_entropy_old <- function(y) {
result = tryCatch({
sumyf=0.0
n=length(y)
yf=fft(y)
sumyf=sum(sapply(yf,function(x){
abs(x)^2
}))
yf=yf/sumyf
entropy=sum(sapply(yf,function(x){
abs(x)*log(1/abs(x))
}))
entropy
}, error = function(e) {
out=NA
out
})
names(result)="spectral_entropy"
return(result)
}
measure.spectral_entropy_old(1:100)
measure.spectral_entropy_old <- function(y) {
result = tryCatch({
sumyf=0.0
n=length(y)
yf=fft(y)
sumyf=sum(sapply(yf,function(x){
abs(x)^2
}))
yf=yf/sumyf
entropy=sum(sapply(yf,function(x){
abs(x)^2*log(1/abs(x)^2)
}))
entropy
}, error = function(e) {
out=NA
out
})
names(result)="spectral_entropy"
return(result)
}
measure.spectral_entropy_old(1:100)
measure.spectral_entropy(1:100)
library(cmftsv2)
library(cmftsv2)
plot.ts(x = arima.sim(model=list(ar = 0.3), n = 10^4))
library(cmftsv2)
cmftsv2(l)ist
cmftsv2(list(ts(sample(100,100),frequency = 10)))
library(cmftsv2)
cmftsv2(list(ts(sample(100,100),frequency = 10)))
a=cmftsv2(list(ts(sample(100,100),frequency = 10)))
str(a)
b=cmftsv2(list(ts(1:100,frequency = 10)))
str(c)
str(b)
e1071::skewness(1:10000)
e1071::skewness(c(sample(10,10),1,1,1,1,11,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1))
e1071::kurtosis(c(sample(10,10),1,1,1,1,11,1,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1,1))
library(cmftsv2)
library(cmftsv2)
a=cmftsv2(list(ts(sample(100,100),frequency = 10)))
str(a)
library(cmftsv2)
library(cmftsv2)
48*19
library(gratis)
x <- generate_ts_with_target(n = 1, ts.length = 120, freq = 10, seasonal = 1,
features = c('entropy', 'stl_features'),
selected.features = c('entropy', 'trend'),
target = c(0.9, 0.8),parallel = F)
x1=x[1:100]
x2=x[11:110]-x1
x3=x[21:120]-x2
par(mar=c(2,1,1,1))
par(mfrow=c(3,1))
plot.ts(x1)
plot.ts(x2)
plot.ts(x3)
x <- generate_ts_with_target(n = 1, ts.length = 120, freq = 10, seasonal = 1,
features = c('entropy', 'stl_features'),
selected.features = c('entropy', 'trend'),
target = c(0.9, 0.8),parallel = F)
x1=x[1:100]
x2=x[11:110]-x1
x3=x[21:120]-x2
par(mar=c(2,1,1,1))
par(mfrow=c(3,1))
plot.ts(x1)
plot.ts(x2)
plot.ts(x3)
cumsum(1:10)
cumsum(1:10)
cumsum(1:10)
set.seed(123)
## length of time series
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
xx
cumsum(ww)
set.seed(123)
## length of time series
TT <- 100
## initialize {x_t} and {w_t}
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
## compute values 2 thru TT
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
plot.ts(xx)
a=arima.sim(model= list(order = c(0, 1, 0)), n=100)
plot.ts(a)
a=arima.sim(model= list(order = c(0, 1, 0)), n=100)
plot.ts(a)
set.seed(123)
TT <- 100
xx <- ww <- rnorm(n = TT, mean = 0, sd = 1)
for (t in 2:TT) {
xx[t] <- xx[t - 1] + ww[t]
}
plot.ts(xx)
a=arima.sim(model= list(order = c(0, 1, 0)), n=100)
plot.ts(a)
a=arima.sim(model= list(order = c(0, 0, 0)), n=100)
mean(a)
var(a)
ww <- rnorm(n = TT, mean = 0, sd = 1)
mean(ww
)
sd(ww)
sd(a)
arimaTs=arima.sim(model= list(order = c(1, 1, 1)), n=100)
arimaTs=arima.sim(model= list(order = c(1, 1, 1)), n=100)
arimaTs=arima.sim(model= list(order = c(0, 1, 1)), n=100)
arimaTs=arima.sim(model= list(order = c(0, 1, 0)), n=100)
arimaTs=arima.sim(model= list(order = c(2, 1, 2)), n=100)
arimaTs=arima.sim(model= list(order = c(5, 1, 2)), n=100)
arimaTs=arima.sim(model= list(order = c(1, 1, 1),ar=0.5,ma=0.5), n=100)
arimaTs
par(mar=c(2,1,1,1))
par(mfrow=c(3,1))
plot.ts(wn)
plot.ts(rw)
plot.ts(arimaTs)
# RandomWalk:
rw=arima.sim(model= list(order = c(0, 1, 0)), n=100)
plot.ts(a)
# WhiteNoise:
wn=arima.sim(model= list(order = c(0, 0, 0)), n=100)
# ARIMA special
arimaTs=arima.sim(model= list(order = c(1, 1, 1),ar=0.5,ma=0.5), n=100)
par(mar=c(2,1,1,1))
par(mfrow=c(3,1))
plot.ts(wn)
plot.ts(rw)
plot.ts(arimaTs)
par(mar=c(2,1,1,1))
par(mfrow=c(3,1))
# plot.ts(wn)
plot.ts(rw)
plot.ts(arimaTs)
plot.ts(sin(rw+arimaTs))
a=ts(c(1,2,3,21,213,2,231,1,2,2,1),frequency = 12)
a
a=ts(c(1,2,3,21,213,2,231,1,2,2,1),frequency = 13)
a
scale(a)
a
str(a)
a
a$Frequency
attr(a,Frequency)
attr(a,"tsp")
attr(a,"class")
attr(a,which = frequency())
attr(a,which = "Frequency")
attr(a,which = "Frequency")
attributes(a)
attr(a,which = "tsp")
attr(a,which = "tsp")[3]
mostattributes(a)
mostattributes(a)
attr(a,which = "tsp")
scale(a)
as.numeric(scale(a))
ts(as.numeric(scale(a)),frequency = 13)
ts(scale(a),frequency = 13)
ts(as.numeric(scale(a)),frequency = 13)
scale(time_serie)
time_serie=a
scale(time_serie)
scale(as.numeric(time_serie))
(as.numeric(time_serie))
time_serie
attr(time_serie,which = "tsp")[3]
ts(as.numeric(scale(time_serie)),frequency = attr(time_serie,which = "tsp")[3])
time_serie
ts(c(1,1,1,1,1,1,1,1,1,1),frequency = 2)
unique(ts(c(1,1,1,1,1,1,1,1,1,1),frequency = 2))
ts(as.numeric(scale(time_serie)),frequency = attr(time_serie,which = "tsp")[3])
length(unique(time_serie))
unique(ts(c(1,1,1,1,1,1,1,1,1,1),frequency = 2))
length(unique(ts(c(1,1,1,1,1,1,1,1,1,1),frequency = 2)))
attr(time_serie,which = "tsp")[3]
attr(time_serie,which = "tsp")
attributes(time_serie,)
attributes(time_serie)
attr(ts(c(1,2,321,21,321,312,3,213,213,213,213,21,1),frequency = 12),which = "tsp")[3]
attr(ts(c(1,2,321,21,321,312,3,213,213,213,213,21,1),frequency = 9),which = "tsp")[3]
base::scale()
base::scale(time_serie)
as.numeric(base::scale(time_serie))
ts(as.numeric(base::scale(time_serie)),frequency = attr(time_serie,which = "tsp")[3])
library(cmftsv2)
cmftsv2(ts(c(1,2,2,2,12,12,21,21,21,12,1,21,2),frequency = 3),scale = T)
cmftsv2(list(ts(c(1,2,2,2,12,12,21,21,21,12,1,21,2),frequency = 3)),scale = T)
cmftsv2(list(ts(c(1,2,2,2,12,12,21,21,21,12,1,21,2),frequency = 3)),scale = F)
a=cmftsv2(list(ts(c(1,2,2,2,12,12,21,21,21,12,1,21,2),frequency = 3)),scale = T)
b=cmftsv2(list(ts(c(1,2,2,2,12,12,21,21,21,12,1,21,2),frequency = 3)),scale = F)
a==b
sum(a==b)
str(a==b)
sum(a==b)
sum(a==b,na.rm = T)
length(a)
length(b)
ts=read.table("/home/fjbaldan/01_LocalWorkSpace/0_UCR/Univariate_arff/ACSF1/ACSF1_TEST.txt",sep="\t")
a=seq(0,1000000,100000)
# a=c(indices,indices[c(-1,-2)]*10,indices[c(-1,-2)]*100)
indices=c(a,a[c(-1,-2)]*10)
indices
18:(length(indices)-1)
# a=c(indices,indices[c(-1,-2)]*10,indices[c(-1,-2)]*100)
indices=c(a,a[c(-1,-2)]*10,a[c(-1,-2)]*100)
indices
19:(length(indices)-1)
20:(length(indices)-1))
20:(length(indices)-1)
as.integer(indices[x+1])
x=12
x=20
as.integer(indices[x+1])
library(scmfts)
scmfts(ts(c(1,12,21,312,32,13,213,12,312,2,1,21,21,21,2,1,1,1)))
scmfts(list(ts(c(1,12,21,312,32,13,213,12,312,2,1,21,21,21,2,1,1,1))))
scmfts(list(ts(c(1,12,21,312,32,13,213,12,312,2,1,21,21,21,2,1,1,1),frequency = 10)))
a=scmfts(list(ts(c(1,12,21,312,32,13,213,12,312,2,1,21,21,21,2,1,1,1),frequency = 10)))
b=scmfts(list(ts(c(1,12,21,312,32,13,213,12,312,2,1,21,21,21,2,1,1,1))))
a %in% b
a[a %in% b]
a[!(a %in% b)]
a %in% b
a[!(names(a) %in% names(b)]
a[!(names(a) %in% names(b))]
17*1*3
seq(1,19,2)
seq(1,19,2)*17*3
a[!(names(a) %in% names(b))]
a[which(!(names(a) %in% names(b)))]
which(!(names(a) %in% names(b)))
seq(1,17,2)
seq(1,17,2)*19*·
seq(1,17,2)*19*3
19*17*·
19*17*3
library(scmfts)
scmfts(list(ts(c(1,2,12,21,321,213,312,2131,23312,32,123,21,312,312,31,2,2),frequency = 10)))
a
a=scmfts(list(ts(c(1,2,12,21,321,213,312,2131,23312,32,123,21,312,312,31,2,2),frequency = 10)))
a=scmfts(list(ts(c(1,2,12,21,321,213,312,2131,23312,32,123,21,312,312,31,2,2),frequency = 100)))
a
str(a)
a=scmfts(list(ts(c(1,2,12,21,321,213,312,2131,23312,32,123,21,312,312,31,22,2,12,21,21,2121,12,21,21,12,12,12,12,21,12,21,21,12,21,12,21,12,21,21,21,21,21,21,12,3,32,23,23,32,232,32,112,21,21,312,312,31,31,31,31,3,31,13,31,31,13,13,1,31,1,2),frequency = 100)))
str(a)
a=scmfts(list(ts(c(1,2,12,21,321,213,312,2131,23312,32,123,21,312,312,31,22,2,12,21,21,2121,12,21,21,12,12,12,12,21,12,21,21,12,21,12,21,12,21,21,21,21,21,21,12,3,32,23,23,32,232,32,112,21,21,312,312,31,31,31,31,3,31,13,31,31,13,13,1,31,1,2),frequency = 10)))
str(a)
